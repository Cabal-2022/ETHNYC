"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Decryption = exports.DecryptionResult = exports.Encryption = exports.EncryptionResult = exports.WRAPPER_KEY_ALGORITHM = void 0;
var version_1 = require("../version");
var errors_1 = require("../errors");
var buffers_1 = require("../buffers");
var crypto_1 = __importDefault(require("../crypto"));
var constants_1 = require("../crypto/constants");
/**
 * This is only used to encrypt the AES secret key so that
 * the only way to decrypt it is with the RSA private key.
 * The RSA private key is stored in an HSM and is thus never
 * exposed to the Privy server or any clients.
 *
 * The next iteration of Privy's crypto code will be using ECC
 * and thus moving away from the less secure RSA+SHA1.
 */
exports.WRAPPER_KEY_ALGORITHM = 'RSA_2048';
var EncryptionResult = /** @class */ (function () {
    /**
     * Constructor
     * @internal
     */
    function EncryptionResult(ciphertext, wrapperKeyId, commitmentId) {
        this._ciphertext = ciphertext;
        this._wrapperKeyId = wrapperKeyId;
        this._commitmentId = commitmentId;
    }
    /**
     * Returns the ciphertext.
     */
    EncryptionResult.prototype.ciphertext = function () {
        return this._ciphertext;
    };
    /**
     * Returns the wrapper key id.
     */
    EncryptionResult.prototype.wrapperKeyId = function () {
        return this._wrapperKeyId;
    };
    /**
     * Returns the commitment id which is (a sha256 hash).
     */
    EncryptionResult.prototype.commitmentId = function () {
        return this._commitmentId;
    };
    return EncryptionResult;
}());
exports.EncryptionResult = EncryptionResult;
var Encryption = /** @class */ (function () {
    /**
     * Instantiates a new Encryption instance.
     *
     * @param plaintext - The plaintext data to encrypt.
     * @param {EncryptConfig} config - An object to configure encryption.
     *   * wrapperKey - (Uint8Array) The wrapper key (RSA public key in DER format).
     *   * wrapperKeyId - (Uint8Array) The metadata ID of the RSA public key.
     */
    function Encryption(plaintext, config) {
        this._plaintext = plaintext;
        this._config = config;
    }
    /**
     * Serialize creates a buffer with the following
     * components concatenated together:
     *
     *     cryptoVersionBuf (UInt16BE)
     *     || wrapperKeyIdLengthInBytes (BigUint64)
     *     || wrapperKeyId (Uint8Array)
     *     || encryptedDataKeyLengthInBytes (BigUint64)
     *     || encryptedDataKey (Uint8Array)
     *     || initializationVector (Uint8Array) (12 bytes)
     *     || encryptedDataLengthInBytes (BigUint64)
     *     || encryptedData (Uint8Array)
     *     || dataAuthenticationTag (Uint8Array) (16 bytes)
     *     || encryptedNonce (32 bytes)
     *     || nonceAuthenticationTag (Uint8Array) (16 bytes)
     *
     * @internal
     */
    Encryption.prototype._serialize = function (encryptedData, encryptedDataKey, encryptedNonce, dataInitializationVector, nonceInitializationVector, wrapperKeyId) {
        return (0, buffers_1.concatBuffers)((0, version_1.cryptoVersionToBuffer)(version_1.CryptoVersion.x0), (0, buffers_1.bufferFromUInt64)(wrapperKeyId.byteLength), wrapperKeyId, (0, buffers_1.bufferFromUInt64)(encryptedDataKey.byteLength), encryptedDataKey, dataInitializationVector, (0, buffers_1.bufferFromUInt64)(encryptedData.byteLength - constants_1.AUTH_TAG_LENGTH_16_BYTES), encryptedData, nonceInitializationVector, encryptedNonce);
    };
    /**
     * Encrypts the given plaintext data.
     *
     * At a high level, the encryption algorithm is implemented as follows:
     *
     *     1. Generate a secret key (aka, data key) and initialization vector
     *     2. Encrypt (AES-256-GCM) plaintext data using data key
     *     3. Generate and encrypt a nonce used for data integrity checks
     *     4. Encrypt (RSA-OAEP-SHA1) data key with wrapper key (RSA public key)
     *     5. Serialize the following components into a single buffer:
     *         * Privy crypto version (0x0001 in this case)
     *         * wrapper key id
     *         * encrypted data key
     *         * initialization vector for AES-256-GCM
     *         * encrypted data
     *         * encrypted nonce
     *     6. Generate the commitment id (sha256 hash) for (nonce || plaintext)
     *     7. Return an EncryptionResult object
     *
     * @returns a Promise that resolves to an EncryptionResult
     */
    Encryption.prototype.encrypt = function () {
        return __awaiter(this, void 0, void 0, function () {
            var pt, wrapperKey, wrapperKeyId, key, iv, encryptedData, nonce, nonceIv, encryptedNonce, encryptedDataKey, serialized, commitmentId, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        pt = this._plaintext;
                        wrapperKey = this._config.wrapperKey;
                        wrapperKeyId = this._config.wrapperKeyId;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 7, , 8]);
                        return [4 /*yield*/, crypto_1.default.aesGCMEncryptionKey()];
                    case 2:
                        key = _a.sent();
                        iv = crypto_1.default.csprng(constants_1.IV_LENGTH_12_BYTES);
                        return [4 /*yield*/, crypto_1.default.aesGCMEncrypt(pt, iv, key)];
                    case 3:
                        encryptedData = _a.sent();
                        nonce = crypto_1.default.csprng(constants_1.IV_LENGTH_12_BYTES);
                        nonceIv = crypto_1.default.csprng(constants_1.IV_LENGTH_12_BYTES);
                        return [4 /*yield*/, crypto_1.default.aesGCMEncrypt(nonce, nonceIv, key)];
                    case 4:
                        encryptedNonce = _a.sent();
                        return [4 /*yield*/, crypto_1.default.rsaOAEPEncrypt(key, wrapperKey)];
                    case 5:
                        encryptedDataKey = _a.sent();
                        serialized = this._serialize(encryptedData, encryptedDataKey, encryptedNonce, iv, nonceIv, wrapperKeyId);
                        return [4 /*yield*/, crypto_1.default.sha256((0, buffers_1.concatBuffers)(nonce, pt))];
                    case 6:
                        commitmentId = _a.sent();
                        // 7. Return an EncryptionResult object
                        return [2 /*return*/, new EncryptionResult(serialized, wrapperKeyId, commitmentId)];
                    case 7:
                        error_1 = _a.sent();
                        throw new errors_1.CryptoError('Failed to encrypt plaintext', error_1);
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    return Encryption;
}());
exports.Encryption = Encryption;
var DecryptionResult = /** @class */ (function () {
    /**
     * Constructor
     * @internal
     */
    function DecryptionResult(plaintext, commitmentNonce) {
        this._plaintext = plaintext;
        this._commitmentNonce = commitmentNonce;
    }
    /**
     * Returns the plaintext.
     */
    DecryptionResult.prototype.plaintext = function () {
        return this._plaintext;
    };
    /**
     * Returns the commitment nonce.
     */
    DecryptionResult.prototype.commitmentNonce = function () {
        return this._commitmentNonce;
    };
    return DecryptionResult;
}());
exports.DecryptionResult = DecryptionResult;
var Decryption = /** @class */ (function () {
    /**
     * Instantiates a new Decryption instance.
     *
     * @param serialized - The serialized encrypted data to decrypt.
     */
    function Decryption(serialized) {
        var _a = this._deserializeEncryptedData(serialized), cryptoVersion = _a.cryptoVersion, wrapperKeyId = _a.wrapperKeyId, encryptedDataKey = _a.encryptedDataKey, dataInitializationVector = _a.dataInitializationVector, ciphertext = _a.ciphertext, nonceInitializationVector = _a.nonceInitializationVector, encryptedNonce = _a.encryptedNonce;
        if (cryptoVersion !== version_1.CryptoVersion.x0) {
            throw new errors_1.CryptoError("Invalid PrivyCrypto version for engine: expected ".concat(version_1.CryptoVersion.x0, " but got ").concat(cryptoVersion));
        }
        if (dataInitializationVector.length !== constants_1.IV_LENGTH_12_BYTES) {
            throw new errors_1.CryptoError("Invalid initialization vector length: expected ".concat(constants_1.IV_LENGTH_12_BYTES, " but got ").concat(dataInitializationVector.length));
        }
        this._wrapperKeyId = wrapperKeyId;
        this._encryptedDataKey = encryptedDataKey;
        this._dataInitializationVector = dataInitializationVector;
        this._ciphertext = ciphertext;
        this._nonceInitializationVector = nonceInitializationVector;
        this._encryptedNonce = encryptedNonce;
    }
    /**
     * Deserialize the encrypted data components
     * @internal
     */
    Decryption.prototype._deserializeEncryptedData = function (serializedEncryptedData) {
        var cryptoVersion = (0, version_1.cryptoVersionFromBuffer)(serializedEncryptedData);
        var offset = version_1.CRYPTO_VERSION_LENGTH_IN_BYTES;
        // Read wrapperKeyId length.
        var _a = (0, buffers_1.uint64FromBuffer)(serializedEncryptedData, offset), wrapperKeyIdLength = _a[0], wrapperKeyIdOffset = _a[1];
        offset = wrapperKeyIdOffset;
        // Read wrapperKeyId.
        var wrapperKeyId = serializedEncryptedData.slice(offset, offset + wrapperKeyIdLength);
        offset += wrapperKeyIdLength;
        // Read encrypted data key length.
        var _b = (0, buffers_1.uint64FromBuffer)(serializedEncryptedData, offset), encryptedDataKeyLength = _b[0], dataKeyOffset = _b[1];
        offset = dataKeyOffset;
        // Read encrypted data key.
        var encryptedDataKey = serializedEncryptedData.slice(offset, offset + encryptedDataKeyLength);
        offset += encryptedDataKeyLength;
        // Read data initialization vector.
        var dataInitializationVector = serializedEncryptedData.slice(offset, offset + constants_1.IV_LENGTH_12_BYTES);
        offset += constants_1.IV_LENGTH_12_BYTES;
        // Read encrypted data length.
        var _c = (0, buffers_1.uint64FromBuffer)(serializedEncryptedData, offset), encryptedDataLength = _c[0], encryptedDataOffset = _c[1];
        offset = encryptedDataOffset;
        var encryptedDataAndAuthTagLength = encryptedDataLength + constants_1.AUTH_TAG_LENGTH_16_BYTES;
        // Read encrypted data.
        var ciphertext = serializedEncryptedData.slice(offset, offset + encryptedDataAndAuthTagLength);
        offset += encryptedDataAndAuthTagLength;
        // Check if nonce is included (for backwards compatibility) and deserialize if so.
        var encryptedNonce = new Uint8Array(0);
        var nonceInitializationVector = new Uint8Array(0);
        if (offset < serializedEncryptedData.length) {
            // Read data initialization vector.
            nonceInitializationVector = serializedEncryptedData.slice(offset, offset + constants_1.IV_LENGTH_12_BYTES);
            offset += constants_1.IV_LENGTH_12_BYTES;
            // Read encrypted nonce.
            encryptedNonce = serializedEncryptedData.slice(offset, offset + constants_1.COMMITMENT_NONCE_LENGTH_32_BYTES + constants_1.AUTH_TAG_LENGTH_16_BYTES);
        }
        return {
            cryptoVersion: cryptoVersion,
            wrapperKeyId: wrapperKeyId,
            encryptedDataKey: encryptedDataKey,
            dataInitializationVector: dataInitializationVector,
            ciphertext: ciphertext,
            nonceInitializationVector: nonceInitializationVector,
            encryptedNonce: encryptedNonce,
        };
    };
    /**
     * Returns the wrapper key id.
     */
    Decryption.prototype.wrapperKeyId = function () {
        return this._wrapperKeyId;
    };
    /**
     * Returns the encrypted data key.
     */
    Decryption.prototype.encryptedDataKey = function () {
        return this._encryptedDataKey;
    };
    /**
     * Decrypts the encrypted data using the given key.
     *
     * @param {Uint8Array} key - The secret key used to encrypt the data.
     * @returns DecryptionResult containing the plaintext data.
     */
    Decryption.prototype.decrypt = function (key) {
        return __awaiter(this, void 0, void 0, function () {
            var plaintext, commitmentNonce, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, crypto_1.default.aesGCMDecrypt(this._ciphertext, this._dataInitializationVector, key)];
                    case 1:
                        plaintext = _a.sent();
                        return [4 /*yield*/, crypto_1.default.aesGCMDecrypt(this._encryptedNonce, this._nonceInitializationVector, key)];
                    case 2:
                        commitmentNonce = _a.sent();
                        return [2 /*return*/, new DecryptionResult(plaintext, commitmentNonce)];
                    case 3:
                        error_2 = _a.sent();
                        if (error_2 instanceof errors_1.CryptoError) {
                            throw error_2;
                        }
                        else {
                            throw new errors_1.CryptoError('Failed to decrypt the encrypted data', error_2);
                        }
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Performs a data integrity check to verify that the decrypted data matches the given commitment id.
     *
     * @params {DecryptionResult} decryptionResult containing the plaintext data.
     * @param {Uint8Array} commitmentId - Commitment hash used to perform optional data integrity check.
     * @returns True if commitment id matches hash calculated from the decryptionResult, false otherwise.
     */
    Decryption.prototype.verify = function (decryptionResult, commitmentId) {
        return __awaiter(this, void 0, void 0, function () {
            var hash;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, crypto_1.default.sha256((0, buffers_1.concatBuffers)(decryptionResult.commitmentNonce(), decryptionResult.plaintext()))];
                    case 1:
                        hash = _a.sent();
                        // Return whether the hash matches the commitmentId.
                        return [2 /*return*/, (0, buffers_1.buffersEqual)(hash, commitmentId)];
                }
            });
        });
    };
    return Decryption;
}());
exports.Decryption = Decryption;
//# sourceMappingURL=x0.js.map