"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Crypto = void 0;
var errors_1 = require("../errors");
var constants_1 = require("./constants");
// https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey
// https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey
var RAW_FORMAT = 'raw';
var SPKI_FORMAT = 'spki';
var EXTRACTABLE = true;
var NOT_EXTRACTABLE = false;
var ENCRYPT_ONLY = ['encrypt'];
var DECRYPT_ONLY = ['decrypt'];
// https://developer.mozilla.org/en-US/docs/Web/API/AesKeyGenParams
// https://developer.mozilla.org/en-US/docs/Web/API/AesGcmParams
var AES_GCM = 'AES-GCM';
var AES_KEY_LENGTH_256_BITS = constants_1.AES_KEY_LENGTH_32_BYTES * 8;
var AUTH_TAG_LENGTH_128_BITS = constants_1.AUTH_TAG_LENGTH_16_BYTES * 8;
// https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams
var RSA_OAEP = 'RSA-OAEP';
var RSA_OAEP_ALGORITHM = {
    name: RSA_OAEP,
    hash: 'SHA-1',
    modulusLength: 2048,
    publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
};
// https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey
function importAESGCMKey(key, usages) {
    if (key.byteLength !== constants_1.AES_KEY_LENGTH_32_BYTES) {
        throw new errors_1.CryptoError("key must be 32 bytes but was ".concat(key.byteLength, " bytes"));
    }
    return crypto.subtle.importKey(RAW_FORMAT, key, AES_GCM, NOT_EXTRACTABLE, usages);
}
// https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey
function importRSAOAEPKey(key, usages) {
    return crypto.subtle.importKey(SPKI_FORMAT, key, RSA_OAEP_ALGORITHM, NOT_EXTRACTABLE, usages);
}
// https://developer.mozilla.org/en-US/docs/Web/API/AesGcmParams
function aesGCMParams(iv) {
    return {
        iv: iv,
        name: AES_GCM,
        tagLength: AUTH_TAG_LENGTH_128_BITS,
    };
}
function csprng(byteLength) {
    return crypto.getRandomValues(new Uint8Array(byteLength));
}
function aesGCMEncryptionKey() {
    return __awaiter(this, void 0, void 0, function () {
        var cryptoKey, arrayBuffer;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, crypto.subtle.generateKey({
                        name: AES_GCM,
                        length: AES_KEY_LENGTH_256_BITS,
                    }, EXTRACTABLE, ENCRYPT_ONLY)];
                case 1:
                    cryptoKey = _a.sent();
                    return [4 /*yield*/, crypto.subtle.exportKey(RAW_FORMAT, cryptoKey)];
                case 2:
                    arrayBuffer = _a.sent();
                    return [2 /*return*/, new Uint8Array(arrayBuffer)];
            }
        });
    });
}
function aesGCMEncrypt(pt, iv, rawKey) {
    return __awaiter(this, void 0, void 0, function () {
        var key, ct;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, importAESGCMKey(rawKey, ENCRYPT_ONLY)];
                case 1:
                    key = _a.sent();
                    return [4 /*yield*/, crypto.subtle.encrypt(aesGCMParams(iv), key, pt)];
                case 2:
                    ct = _a.sent();
                    return [2 /*return*/, new Uint8Array(ct)];
            }
        });
    });
}
function aesGCMDecrypt(ct, iv, rawKey) {
    return __awaiter(this, void 0, void 0, function () {
        var key, pt;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, importAESGCMKey(rawKey, DECRYPT_ONLY)];
                case 1:
                    key = _a.sent();
                    return [4 /*yield*/, crypto.subtle.decrypt(aesGCMParams(iv), key, ct)];
                case 2:
                    pt = _a.sent();
                    return [2 /*return*/, new Uint8Array(pt)];
            }
        });
    });
}
function rsaOAEPEncrypt(pt, rawKey) {
    return __awaiter(this, void 0, void 0, function () {
        var key, ct;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, importRSAOAEPKey(rawKey, ENCRYPT_ONLY)];
                case 1:
                    key = _a.sent();
                    return [4 /*yield*/, crypto.subtle.encrypt(RSA_OAEP_ALGORITHM, key, pt)];
                case 2:
                    ct = _a.sent();
                    return [2 /*return*/, new Uint8Array(ct)];
            }
        });
    });
}
function sha256(data) {
    return __awaiter(this, void 0, void 0, function () {
        var hash;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, crypto.subtle.digest('SHA-256', data)];
                case 1:
                    hash = _a.sent();
                    return [2 /*return*/, new Uint8Array(hash)];
            }
        });
    });
}
exports.Crypto = {
    csprng: csprng,
    sha256: sha256,
    aesGCMEncrypt: aesGCMEncrypt,
    aesGCMDecrypt: aesGCMDecrypt,
    aesGCMEncryptionKey: aesGCMEncryptionKey,
    rsaOAEPEncrypt: rsaOAEPEncrypt,
};
//# sourceMappingURL=browser.js.map