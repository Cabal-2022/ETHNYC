"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.wrapAsBuffer = void 0;
/**
 * Wraps the given Uint8Array as a Buffer without copying.
 * The returned Buffer shares the same underlying ArrayBuffer as the input.
 */
const wrapAsBuffer = (data) => Buffer.from(data.buffer, data.byteOffset, data.byteLength);
exports.wrapAsBuffer = wrapAsBuffer;
exports.default = {
    /**
     * Converts a buffer to string using the given encoding.
     *
     * @internal
     * @param {Uint8Array} data data to convert to a string
     * @param {EncodingType} encoding resulting string encoding
     * @returns {string} string
     */
    toString(data, encoding) {
        return (0, exports.wrapAsBuffer)(data).toString(encoding);
    },
    /**
     * Converts a string encoded in the given encoding to a buffer.
     *
     * @internal
     * @param {string} data data to convert to a buffer
     * @param {EncodingType} encoding encoding of the string
     * @returns {Uint8Array} Uint8Array
     */
    toBuffer(data, encoding) {
        return Buffer.from(data, encoding);
    },
};
//# sourceMappingURL=encoding.js.map