"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatPrivyError = exports.wrapApiError = exports.PrivyClientError = exports.PrivyApiError = exports.PrivyError = void 0;
const axios_1 = __importDefault(require("axios"));
class PrivyError extends Error {
    /**
     * @param type Privy error type.
     * @param message Human-readable message.
     * @param cause Source of this error.
     */
    constructor(message, cause) {
        super(message);
        if (cause instanceof Error) {
            this.cause = cause;
        }
    }
    toString() {
        return `${this.type}: ${this.message}`;
    }
}
exports.PrivyError = PrivyError;
/**
 * Issues with the Privy api.
 */
class PrivyApiError extends PrivyError {
    constructor(type, status, message, cause) {
        super(message, cause);
        this.type = type;
        this.status = status;
    }
}
exports.PrivyApiError = PrivyApiError;
/**
 * Issues with the Privy client.
 */
class PrivyClientError extends PrivyError {
    constructor(message, cause) {
        super(message, cause);
        this.type = 'client_error';
    }
}
exports.PrivyClientError = PrivyClientError;
const wrapApiError = (error) => {
    if (!axios_1.default.isAxiosError(error)) {
        return (0, exports.formatPrivyError)(error);
    }
    if (!error.response) {
        // The request was made but no response was received, or another connection error occurred.
        return new PrivyApiError('api_error', null, error.message, error);
    }
    // The request was made and the server responded with a 4xx/5xx status code.
    // Convert to a wrapped PrivyError.
    const { type, message } = error.response.data;
    return new PrivyApiError(type, error.response.status, message, error);
};
exports.wrapApiError = wrapApiError;
const formatPrivyError = (error) => {
    if (error instanceof PrivyError) {
        // Pass through PrivyError objects.
        return error;
    }
    if (error instanceof Error) {
        // Non-Privy error occurred. Wrap it in a PrivyClientError.
        return new PrivyClientError(error.message, error);
    }
    return new PrivyClientError(`Internal error: ${error}`);
};
exports.formatPrivyError = formatPrivyError;
//# sourceMappingURL=errors.js.map