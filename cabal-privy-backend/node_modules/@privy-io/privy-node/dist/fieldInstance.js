"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FieldInstance = void 0;
const encoding_1 = __importStar(require("./encoding"));
class FieldInstance {
    constructor(attributes, plaintext, contentType) {
        this.attributes = attributes;
        this.plaintext = plaintext;
        this.contentType = contentType;
    }
    /**
     * Returns the plaintext contents of this field instance as a string.
     */
    text() {
        return encoding_1.default.toString(this.plaintext, 'utf8');
    }
    /**
     * Returns the plaintext contents of this field instance as a Buffer.
     */
    buffer() {
        return (0, encoding_1.wrapAsBuffer)(this.plaintext);
    }
    /**
     * The id of the user this field instance belongs to.
     */
    get user_id() {
        return this.attributes.user_id;
    }
    /**
     * The id of the field this field instance belongs to.
     */
    get field_id() {
        return this.attributes.field_id;
    }
    /**
     * The type of object the value is. This is either 'string' or 'file'.
     *
     * If this is 'string', the value will be the encrypted contents.
     *
     * If this is 'file', the value will be the plaintext file id.
     */
    get object_type() {
        return this.attributes.object_type;
    }
    /**
     * The value of this field instance. The value depends on the object type.
     *
     * If object_type is 'string', this will be the encrypted contents.
     *
     * If object_type is 'file', this will be the plaintext file id.
     */
    get value() {
        return this.attributes.value;
    }
    /**
     * The sha256 hash of the plaintext value concatenated with a nonce.
     */
    get integrity_hash() {
        return this.attributes.integrity_hash;
    }
    /**
     * The time this field instance was created.
     */
    get created_at() {
        return this.attributes.created_at;
    }
}
exports.FieldInstance = FieldInstance;
//# sourceMappingURL=fieldInstance.js.map